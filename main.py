from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import requests
from bs4 import BeautifulSoup
import asyncio

# üîê –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ Telegram-–±–æ—Ç–∞
API_TOKEN = '7910558919:AAFlI7JWP3s-MTPV6ILpzQzgnRZSBPnSyGo'

# üì° –ö–∞–Ω–∞–ª, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
CHANNEL_ID = '@forex_news_100k'

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å ForexFactory
async def fetch_forex_news():
    url = 'https://www.forexfactory.com/calendar'
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')

    important_news = []
    table = soup.find('table', {'id': 'calendar__table'})
    if not table:
        return

    rows = table.find_all('tr', class_='calendar__row')
    for row in rows:
        impact = row.find('td', class_='calendar__impact')
        if impact and 'high' in impact.get('class', []):
            time = row.find('td', class_='calendar__time').text.strip()
            title = row.find('td', class_='calendar__event').text.strip()
            country = row.find('td', class_='calendar__country').text.strip()
            currency = row.find('td', class_='calendar__currency').text.strip()

            msg = f"üî• –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å ({currency}): {title}\n‚è∞ –í—Ä–µ–º—è: {time} ({country})"
            important_news.append(msg)

    return important_news

# üîÅ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def scheduled_news_check():
    while True:
        news = await fetch_forex_news()
        if news:
            for n in news:
                await bot.send_message(CHANNEL_ID, n)
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

# üü¢ –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ –≤–∞–∂–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –Ω–∞ —Ä—ã–Ω–∫–µ Forex üìä")

# üß™ –ö–æ–º–∞–Ω–¥–∞ /force ‚Äî —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.message_handler(commands=['force'])
async def force_news(message: types.Message):
    news = await fetch_forex_news()
    if news:
        for n in news:
            await bot.send_message(CHANNEL_ID, n)
        await message.answer("üì® –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é.")
    else:
        await message.answer("‚ùå –í–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled_news_check())
    executor.start_polling(dp, skip_updates=True)
